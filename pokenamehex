#!/usr/bin/env ruby

LEN_DEFAULT = 24
ENC_DEFAULT = 'utf-16le'

LEN = ENV['BUF_LEN'] || LEN_DEFAULT
ENC = ENV['ENCODING'] || ENC_DEFAULT

def enc(s)
  s.encode(ENC)
end

def zero_pad_right(bytes, len=LEN)
  (bytes + ([0x00] * len)).take([bytes.length, len].max)
end

def hexpair(b)
  "%02x" % b
end

def hexpairs(s)
  zero_pad_right(enc(s).bytes).map(&method(:hexpair))
end

def dump_one(s)
  puts "#{hexpairs(s).join(' ')}    #{s}"
end

def show_help
  STDERR.puts <<-END
    Show hexdump for unicode strings, after encoding them (#{ENC_DEFAULT}
    by default), suitable for hexing pokemon names (i.e. in PKSM) or for
    whatever other reason you want a hexdump of encoded strings I guess.

    Usage:
      #{$0} [-h|--help]     you're looking at it
      #{$0} [STRING ...]    show hexpairs for STRINGs
      #{$0} -               read strings from STDIN

    ENV vars:
      BUF_LEN               buffer length (default #{LEN_DEFAULT} bytes)
      ENCODING              encoding (default #{ENC_DEFAULT}, see Ruby encoding names)

  END
end

def maybe_show_help_and_exit
  if ARGV.empty? || !(ARGV & ['-h', '--help']).empty?
    show_help and exit
  end
end

def get_strings
  return STDIN.readlines.map(&:chomp) if ARGV.first == '-'
  ARGV
end

def dump_strings
  get_strings.each(&method(:dump_one))
end

def run!
  dump_strings unless maybe_show_help_and_exit
end

run!
